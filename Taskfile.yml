version: '3'

# ========================================
# Template System - Source Patterns
# ========================================

vars:
  PROJECT_NAME: arlon
  CLI_BINARY_NAME: arlon
  CORE_LIB_NAME: arlon-core
  CLI_PACKAGE: arlon-cli
  CORE_PACKAGE: arlon-core
  CLI_DIR: cli
  CORE_DIR: core
  TARGET_DIR: target
  RELEASE_DIR: "{{.TARGET_DIR}}/release"
  DEBUG_DIR: "{{.TARGET_DIR}}/debug"
  CACHE_DIR: .task/cache
  
  # Dynamic variables
  GIT_COMMIT:
    sh: git rev-parse --short HEAD
  BUILD_DATE:
    sh: date -Iseconds

  # Common source pattern templates
  RUST_SOURCES: |
    {{.CORE_DIR}}/src/**/*.rs
    {{.CLI_DIR}}/src/**/*.rs
    */Cargo.toml
    Cargo.lock
  
  CORE_SOURCES: |
    {{.CORE_DIR}}/src/**/*.rs
    {{.CORE_DIR}}/Cargo.toml
    Cargo.lock
  
  CLI_SOURCES: |
    {{.CLI_DIR}}/src/**/*.rs
    {{.CLI_DIR}}/Cargo.toml
    Cargo.lock
  
  TEST_SOURCES: |
    {{.CORE_DIR}}/src/**/*.rs
    {{.CLI_DIR}}/src/**/*.rs
    {{.CORE_DIR}}/tests/**/*.rs
    */Cargo.toml
    Cargo.lock
  
  CONFIG_SOURCES: |
    rust-toolchain.toml
    rustfmt.toml
    .rustfmt.toml
    clippy.toml
    .clippy.toml

# Global environment variables
env:
  RUST_BACKTRACE: 1

# Include files for modular task organization
includes:
  core:
    taskfile: ./{{.CORE_DIR}}/Taskfile.yml
    dir: ./{{.CORE_DIR}}
    optional: true
  cli:
    taskfile: ./{{.CLI_DIR}}/Taskfile.yml
    dir: ./{{.CLI_DIR}}
    optional: true

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # ========================================
  # Cache System Setup
  # ========================================
  
  # ========================================
  # Internal Cache Management (rarely used by end users)
  # ========================================

  __cache:init:
    desc: "[Internal] Initialize cache directory"
    cmds:
      - mkdir -p {{.CACHE_DIR}}
      - echo "Cache initialized at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/init-timestamp
    status:
      - test -d {{.CACHE_DIR}}
    internal: true

  clean:cache:
    desc: Clean task cache files and force rebuild on next run
    cmds:
      - rm -rf {{.CACHE_DIR}}
      - echo "Task cache cleaned successfully. Next task runs will rebuild everything."

  info:cache:
    desc: Show task cache status and performance information
    deps: [__cache:init]
    cmds:
      - 'echo "=== Task Cache Information ==="'
      - 'echo "Cache directory: {{.CACHE_DIR}}"'
      - 'echo "Last initialized: $(cat {{.CACHE_DIR}}/init-timestamp 2>/dev/null || echo Never)"'
      - 'echo "Cache size: $(du -sh {{.CACHE_DIR}} 2>/dev/null | cut -f1 || echo Unknown)"'
      - 'echo "Cached tasks: $(find {{.CACHE_DIR}} -name "*-timestamp" -type f 2>/dev/null | wc -l || echo 0)"'
      - 'echo ""'
      - 'echo "=== Recent Task Activity ==="'
      - 'find {{.CACHE_DIR}} -name "*-timestamp" -type f -exec ls -lt {} \; 2>/dev/null | head -5 | sed "s|{{.CACHE_DIR}}/||g" | sed "s|-timestamp||g" || echo "No cached tasks found"'
      - 'echo ""'
      - 'echo "Tip: Use \"task clean:cache\" to clear cache and force full rebuild."'

  # ========================================
  # Development Tasks
  # ========================================
  
  dev:
    desc: Full development workflow (format, check, test, build)
    deps:
      - fmt
      - check
      - test
      - build

  dev:watch:
    desc: Watch for changes and run development workflow
    deps: [install:cargo-watch]
    cmds:
      - cargo watch -x fmt -x check -x test -x build

  # ========================================
  # Build Tasks
  # ========================================

  build:
    desc: Build all packages in debug mode
    cmds:
      - cargo build --workspace
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "*/Cargo.toml"
      - Cargo.lock
    generates:
      - "{{.DEBUG_DIR}}/{{.CLI_BINARY_NAME}}"

  build:core:
    desc: Build only the core library
    cmds:
      - cargo build -p {{.CORE_PACKAGE}}
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CORE_DIR}}/Cargo.toml"
      - Cargo.lock

  build:cli:
    desc: Build only the CLI application
    deps: [build:core]
    cmds:
      - cargo build -p {{.CLI_PACKAGE}}
    sources:
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/Cargo.toml"
      - Cargo.lock
    generates:
      - "{{.DEBUG_DIR}}/{{.CLI_BINARY_NAME}}"

  build:release:
    desc: Build all packages in release mode (optimized)
    cmds:
      - cargo build --workspace --release
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "*/Cargo.toml"
      - Cargo.lock
    generates:
      - "{{.RELEASE_DIR}}/{{.CLI_BINARY_NAME}}"

  build:release:core:
    desc: Build core library in release mode
    cmds:
      - cargo build -p {{.CORE_PACKAGE}} --release
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CORE_DIR}}/Cargo.toml"
      - Cargo.lock

  build:release:cli:
    desc: Build CLI application in release mode
    deps: [build:release:core]
    cmds:
      - cargo build -p {{.CLI_PACKAGE}} --release
    sources:
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/Cargo.toml"
      - Cargo.lock
    generates:
      - "{{.RELEASE_DIR}}/{{.CLI_BINARY_NAME}}"

  # ========================================
  # Test Tasks
  # ========================================

  test:
    desc: Run all tests (unit + integration) for all packages
    deps: [__cache:init, build:core]
    cmds:
      - cargo test --workspace
      - echo "Tests completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/test-timestamp
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "{{.CORE_DIR}}/tests/**/*.rs"
      - "*/Cargo.toml"
      - Cargo.lock
    generates:
      - "{{.CACHE_DIR}}/test-timestamp"

  test:core:
    desc: Run tests for core library only
    deps: [__cache:init]
    cmds:
      - cargo test -p {{.CORE_PACKAGE}}
      - echo "Core tests completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/test-core-timestamp
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CORE_DIR}}/tests/**/*.rs"
      - "{{.CORE_DIR}}/Cargo.toml"
      - Cargo.lock
    generates:
      - "{{.CACHE_DIR}}/test-core-timestamp"

  test:cli:
    desc: Run tests for CLI package only
    deps: [__cache:init, build:core]
    cmds:
      - cargo test -p {{.CLI_PACKAGE}}
      - echo "CLI tests completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/test-cli-timestamp
    sources:
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/Cargo.toml"
      - Cargo.lock
    generates:
      - "{{.CACHE_DIR}}/test-cli-timestamp"

  test:unit:
    desc: Run only unit tests
    cmds:
      - cargo test --workspace --lib

  test:integration:
    desc: Run only integration tests
    cmds:
      - cargo test --workspace --test '*'

  test:doc:
    desc: Run documentation tests
    cmds:
      - cargo test --workspace --doc

  test:coverage:
    desc: Run tests with coverage report
    deps: [_cache:init, install:tarpaulin]
    cmds:
      - cargo tarpaulin --workspace --out Html --output-dir coverage
      - echo "Coverage completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/coverage-timestamp
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "{{.CORE_DIR}}/tests/**/*.rs"
      - "*/Cargo.toml"
      - Cargo.lock
    generates:
      - "coverage/tarpaulin-report.html"
      - "{{.CACHE_DIR}}/coverage-timestamp"

  # ========================================
  # Quality Assurance Tasks
  # ========================================

  check:
    desc: Check all packages for errors without building
    deps: [_cache:init]
    cmds:
      - cargo check --workspace
      - echo "Check completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/check-timestamp
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "*/Cargo.toml"
      - Cargo.lock
    generates:
      - "{{.CACHE_DIR}}/check-timestamp"

  check:core:
    desc: Check core library for errors
    deps: [_cache:init]
    cmds:
      - cargo check -p {{.CORE_PACKAGE}}
      - echo "Check core completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/check-core-timestamp
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CORE_DIR}}/Cargo.toml"
      - Cargo.lock
    generates:
      - "{{.CACHE_DIR}}/check-core-timestamp"

  check:cli:
    desc: Check CLI package for errors
    deps: [_cache:init]
    cmds:
      - cargo check -p {{.CLI_PACKAGE}}
      - echo "Check CLI completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/check-cli-timestamp
    sources:
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/Cargo.toml"
      - Cargo.lock
    generates:
      - "{{.CACHE_DIR}}/check-cli-timestamp"

  clippy:
    desc: Run clippy (Rust linter) on all packages
    deps: [_cache:init]
    cmds:
      - cargo clippy --workspace -- -D warnings
      - echo "Clippy completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/clippy-timestamp
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "*/Cargo.toml"
      - Cargo.lock
      - clippy.toml
      - .clippy.toml
    generates:
      - "{{.CACHE_DIR}}/clippy-timestamp"

  clippy:core:
    desc: Run clippy on core library
    deps: [_cache:init]
    cmds:
      - cargo clippy -p {{.CORE_PACKAGE}} -- -D warnings
      - echo "Clippy core completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/clippy-core-timestamp
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CORE_DIR}}/Cargo.toml"
      - Cargo.lock
      - clippy.toml
      - .clippy.toml
    generates:
      - "{{.CACHE_DIR}}/clippy-core-timestamp"

  clippy:cli:
    desc: Run clippy on CLI package
    deps: [_cache:init]
    cmds:
      - cargo clippy -p {{.CLI_PACKAGE}} -- -D warnings
      - echo "Clippy CLI completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/clippy-cli-timestamp
    sources:
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/Cargo.toml"
      - Cargo.lock
      - clippy.toml
      - .clippy.toml
    generates:
      - "{{.CACHE_DIR}}/clippy-cli-timestamp"

  clippy:fix:
    desc: Auto-fix clippy warnings where possible
    cmds:
      - cargo clippy --workspace --fix --allow-dirty

  fmt:
    desc: Format all code using rustfmt
    cmds:
      - cargo fmt --all

  fmt:check:
    desc: Check if all code is formatted correctly
    cmds:
      - cargo fmt --all --check

  audit:
    desc: Audit dependencies for security vulnerabilities
    deps: [install:audit]
    cmds:
      - cargo audit

  # ========================================
  # Utility Tasks
  # ========================================

  clean:
    desc: Remove all build artifacts (cargo clean)
    cmds:
      - cargo clean

  clean:all:
    desc: Deep clean - remove all build artifacts and task cache
    cmds:
      - cargo clean
      - rm -rf {{.CACHE_DIR}}
      - echo "All build artifacts and task cache cleared"

  clean:target:
    desc: Remove target directory only
    cmds:
      - rm -rf {{.TARGET_DIR}}

  deps:
    desc: Show dependency tree
    cmds:
      - cargo tree --workspace

  deps:outdated:
    desc: Check for outdated dependencies
    deps: [install:outdated]
    cmds:
      - cargo outdated --workspace

  deps:update:
    desc: Update dependencies
    cmds:
      - cargo update

  # ========================================
  # Installation Tasks
  # ========================================

  install:
    desc: Install the CLI binary locally
    deps: [build:release:cli]
    cmds:
      - cargo install --path {{.CLI_DIR}} --force

  install:cargo-watch:
    desc: Install cargo-watch for file watching
    cmds:
      - cargo install cargo-watch
    status:
      - command -v cargo-watch

  install:tarpaulin:
    desc: Install cargo-tarpaulin for coverage
    cmds:
      - cargo install cargo-tarpaulin
    status:
      - command -v cargo-tarpaulin

  install:audit:
    desc: Install cargo-audit for security auditing
    cmds:
      - cargo install cargo-audit
    status:
      - command -v cargo-audit

  install:outdated:
    desc: Install cargo-outdated for dependency checking
    cmds:
      - cargo install cargo-outdated
    status:
      - command -v cargo-outdated

  # ========================================
  # Documentation Tasks
  # ========================================

  doc:
    desc: Generate documentation for all packages
    deps: [_cache:init]
    cmds:
      - cargo doc --workspace --no-deps
      - echo "Documentation completed at {{.BUILD_DATE}}" > {{.CACHE_DIR}}/doc-timestamp
    sources:
      - "{{.CORE_DIR}}/src/**/*.rs"
      - "{{.CLI_DIR}}/src/**/*.rs"
      - "*/Cargo.toml"
      - Cargo.lock
    generates:
      - "target/doc/arlon_core/index.html"
      - "target/doc/arlon_cli/index.html"
      - "{{.CACHE_DIR}}/doc-timestamp"

  doc:open:
    desc: Generate and open documentation
    cmds:
      - cargo doc --workspace --no-deps --open

  doc:core:
    desc: Generate documentation for core library
    cmds:
      - cargo doc -p {{.CORE_PACKAGE}} --no-deps

  doc:cli:
    desc: Generate documentation for CLI package
    cmds:
      - cargo doc -p {{.CLI_PACKAGE}} --no-deps

  # ========================================
  # Release Tasks
  # ========================================

  release:prepare:
    desc: Prepare for release (format, check, test, build)
    deps:
      - fmt
      - clippy
      - test
      - build:release
      - doc

  release:check:
    desc: Dry-run release check
    cmds:
      - cargo publish --dry-run -p {{.CORE_PACKAGE}}
      - cargo publish --dry-run -p {{.CLI_PACKAGE}}

  # ========================================
  # Benchmark Tasks
  # ========================================

  bench:
    desc: Run benchmarks
    cmds:
      - cargo bench --workspace

  bench:core:
    desc: Run benchmarks for core library
    cmds:
      - cargo bench -p {{.CORE_PACKAGE}}

  # ========================================
  # Example Tasks
  # ========================================

  example:
    desc: Run CLI with example commands
    deps: [build:cli]
    cmds:
      - echo "Running example commands..."
      - ./{{.DEBUG_DIR}}/{{.CLI_BINARY_NAME}} --help
      - task example:commits

  example:commits:
    desc: Example commit comparison
    deps: [build:cli]
    cmds:
      - 'echo "Example: Comparing commits with main branch"'
      - './{{.DEBUG_DIR}}/{{.CLI_BINARY_NAME}} commits main || true'

  example:files:
    desc: Example file comparison
    deps: [build:cli]
    cmds:
      - 'echo "Example: Comparing files with main branch"'
      - './{{.DEBUG_DIR}}/{{.CLI_BINARY_NAME}} files main || true'
